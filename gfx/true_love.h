/* Generated with shader-compressor by NR4/Team210. */
#ifndef TRUE_LOVE_H
#define TRUE_LOVE_H
const char * true_love_frag =
"/* Pajazzo Real Love Visuals\n"
" * Copyright (C) 2019  Alexander Kraus <nr4@z10.info>\n"
" * \n"
" * This program is free software: you can redistribute it and/or modify\n"
" * it under the terms of the GNU General Public License as published by\n"
" * the Free Software Foundation, either version 3 of the License, or\n"
" * (at your option) any later version.\n"
" * \n"
" * This program is distributed in the hope that it will be useful,\n"
" * but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
" * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
" * GNU General Public License for more details.\n"
" * \n"
" * You should have received a copy of the GNU General Public License\n"
" * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n"
" */\n"
"\n"
" #version 130\n"
"\n"
"uniform float iTime;\n"
"uniform vec2 iResolution;\n"
" \n"
"// Global constants\n"
"const float pi = acos(-1.);\n"
"const vec3 c = vec3(1.0, 0.0, -1.0);\n"
"float a = 1.0;\n"
"\n"
"// Hash function\n"
"void rand(in vec2 x, out float num)\n"
"{\n"
"    x += 400.;\n"
"    num = fract(sin(dot(sign(x)*abs(x) ,vec2(12.9898,78.233)))*43758.5453);\n"
"}\n"
"\n"
"// Arbitrary-frequency 2D noise\n"
"void lfnoise(in vec2 t, out float num)\n"
"{\n"
"    vec2 i = floor(t);\n"
"    t = fract(t);\n"
"    //t = ((6.*t-15.)*t+10.)*t*t*t;  // TODO: add this for slower perlin noise\n"
"    t = smoothstep(c.yy, c.xx, t); // TODO: add this for faster value noise\n"
"    vec2 v1, v2;\n"
"    rand(i, v1.x);\n"
"    rand(i+c.xy, v1.y);\n"
"    rand(i+c.yx, v2.x);\n"
"    rand(i+c.xx, v2.y);\n"
"    v1 = c.zz+2.*mix(v1, v2, t.y);\n"
"    num = mix(v1.x, v1.y, t.x);\n"
"}\n"
"\n"
"// Multi-frequency 2D noise\n"
"void mfnoise(in vec2 x, in float fmin, in float fmax, in float alpha, out float num)\n"
"{\n"
"    num = 0.;\n"
"    float a = 1., nf = 0., buf;\n"
"    for(float f = fmin; f<fmax; f = f*2.)\n"
"    {\n"
"        lfnoise(f*x, buf);\n"
"        num += a*buf;\n"
"        a *= alpha;\n"
"        nf += 1.;\n"
"    }\n"
"    num *= (1.-alpha)/(1.-pow(alpha, nf));\n"
"}\n"
"\n"
"void rot(in vec3 p, out mat3 rot)\n"
"{\n"
"    rot = mat3(c.xyyy, cos(p.x), sin(p.x), 0., -sin(p.x), cos(p.x))\n"
"        *mat3(cos(p.y), 0., -sin(p.y), c.yxy, sin(p.y), 0., cos(p.y))\n"
"        *mat3(cos(p.z), -sin(p.z), 0., sin(p.z), cos(p.z), c.yyyx);\n"
"}\n"
"\n"
"// Distance to regular voronoi\n"
"void dvoronoi(in vec2 x, out float d, out vec2 ind)\n"
"{\n"
"    vec2 y = floor(x);\n"
"   	float ret = 1.;\n"
"    \n"
"    //find closest control point. (\"In which cell am I?\")\n"
"    vec2 pf=c.yy, p;\n"
"    float df=10.;\n"
"    \n"
"    for(int i=-1; i<=1; i+=1)\n"
"        for(int j=-1; j<=1; j+=1)\n"
"        {\n"
"            p = y + vec2(float(i), float(j));\n"
"            vec2 pa;\n"
"            lfnoise(p-.5*iTime, pa.x);\n"
"            lfnoise(p-.5*iTime-1.3, pa.y);\n"
"            pa = .5+.5*pa;\n"
"            p += pa;\n"
"            \n"
"            d = length(x-p);\n"
"            \n"
"            if(d < df)\n"
"            {\n"
"                df = d;\n"
"                pf = p;\n"
"            }\n"
"        }\n"
"    \n"
"    //compute voronoi distance: minimum distance to any edge\n"
"    for(int i=-1; i<=1; i+=1)\n"
"        for(int j=-1; j<=1; j+=1)\n"
"        {\n"
"            p = y + vec2(float(i), float(j));\n"
"            vec2 pa;\n"
"            lfnoise(p-.5*iTime, pa.x);\n"
"            lfnoise(p-.5*iTime-1.3, pa.y);\n"
"            pa = .5+.5*pa;\n"
"            p += pa;\n"
"            \n"
"            vec2 o = p - pf;\n"
"            d = length(.5*o-dot(x-pf, o)/dot(o,o)*o);\n"
"            ret = min(ret, d);\n"
"        }\n"
"    \n"
"    d = ret;\n"
"    ind = pf;\n"
"}\n"
"\n"
"// 2D box\n"
"void dbox(in vec2 p, in vec2 b, out float dst)\n"
"{\n"
"  	vec2 d = abs(p) - b;\n"
"  	dst = length(max(d,0.0)) + min(max(d.x,d.y),0.0); \n"
"}\n"
"\n"
"// 2D circle\n"
"void dcircle(in vec2 x, in float r, out float dst)\n"
"{\n"
"    dst = length(x)-r;\n"
"}\n"
"\n"
"// Stroke\n"
"void stroke(in float d0, in float s, out float d)\n"
"{\n"
"    d = abs(d0)-s;\n"
"}\n"
"\n"
"// Extrusion\n"
"void zextrude(in float z, in float d2d, in float h, out float d)\n"
"{\n"
"    vec2 w = vec2(-d2d, abs(z)-0.5*h);\n"
"    d = length(max(w,0.0));\n"
"}\n"
"\n"
"// Add sdfs to scene\n"
"void add(in vec4 old, in vec4 new, out vec4 result)\n"
"{\n"
"    result = mix(old, new, step(new.x,0.));\n"
"}\n"
"\n"
"// Mix appropriate marble colors.\n"
"void color(in float scale, out vec3 col)\n"
"{\n"
"    scale = clamp(scale, 0., .999);\n"
"    const int N = 5;\n"
"    const vec3 colors[N] = vec3[N](\n"
"        c.yyy,\n"
"        vec3(0.24,0.03,0.62),\n"
"        vec3(0.55,0.22,0.91),\n"
"        .6*vec3(0.69,0.37,0.93),\n"
"        .2*vec3(0.79,0.07,0.83)\n"
"    );\n"
"	float index = mod(floor(scale*float(N)),N-1.), \n"
"        remainder = clamp(scale*float(N)-index,0.,1.);\n"
"    col = mix(colors[int(index)],colors[int(mod(index+1.,N-1.))], remainder);\n"
"}\n"
"\n"
"void dheart(in vec2 x, in float R, out float dst)\n"
"{\n"
"    x.x *= (1.-mix(0.,1.8*R, x.y));\n"
"    x.y *= (1.+.4*R*R);\n"
"    float p = atan(x.y,abs(x.x));\n"
"    dst = length(x);\n"
"    dst -= mix(R,-.5*R, p/2./pi+.5);\n"
"}\n"
"\n"
"void colorize(in vec2 uv, out vec3 col)\n"
"{\n"
"    col = c.yyy;\n"
"    uv -= 100.;\n"
"    \n"
"    float roff;\n"
"    lfnoise(.5*iTime*c.xx, roff);\n"
"    roff = mix(0., .5+.5*roff, clamp((iTime-20.)/5.,0.,1.));\n"
"    \n"
"    for(float i=0.; i<3.+8.*roff; i+=1.)\n"
"    {\n"
"        vec2 gd;\n"
"        lfnoise(.1*i*c.xx+.33, gd.x);\n"
"        lfnoise(.1*i*c.xx+.13, gd.y);\n"
"        uv += gd;\n"
"        \n"
"        float dh, db, d, dv;\n"
"        dheart(uv,.75,dh);\n"
"        vec2 yi,y;\n"
"        dvoronoi((3.+2.*gd.x)*uv, dv, yi);\n"
"        y = uv-yi/(3.+2.*gd.x);\n"
"        float py;\n"
"        lfnoise(yi-iTime-.3+i, py);\n"
"        py *= pi;\n"
"        mat2 Ry = mat2(cos(py),-sin(py),sin(py),cos(py));\n"
"        y = Ry * y;\n"
"        vec2 dy;\n"
"        lfnoise(yi-iTime+.1*i, dy.x);\n"
"        lfnoise(yi-iTime-.1+.1*i, dy.y);\n"
"        float size;\n"
"        lfnoise(yi-iTime-.2+.1*i, size);\n"
"		size *= (3.+2.*gd.x);\n"
"        dheart(y-.05*dy, .1+.05*size,db);\n"
"        float dhs, dbs, ds;\n"
"        stroke(db, .02, dbs);\n"
"        d = mix(1., dh, clamp(iTime/5., 0., 1.));\n"
"        d = mix(d, db, clamp((iTime-5.)/5.,0.,1.));\n"
"        d = mix(d, dbs, .5*clamp((iTime-10.)/5.,0.,1.));\n"
"        vec3 c1;\n"
"        float scale;\n"
"        lfnoise(.3*iTime*c.xx+yi+.01*i, scale);\n"
"        scale = .5+.5*scale;\n"
"        color(scale,c1);\n"
"        \n"
"        col = mix(col, mix(col,c1,.5), smoothstep(1.5/iResolution.y, -1.5/iResolution.y,d));\n"
"		\n"
"        float dbss;\n"
"        stroke(dbs, .005, dbss);\n"
"        col = mix(col, mix(col,c1,1.), smoothstep(1.5/iResolution.y, -1.5/iResolution.y,dbss));\n"
"    	\n"
"        mat3 RR;\n"
"        vec3 rrt;\n"
"        lfnoise(yi + .01*i + .3*iTime*c.xx, rrt.x);\n"
"        lfnoise(yi + .005*i + .3*1.1*iTime*c.xx, rrt.y);\n"
"        lfnoise(yi + .02*i + .3*1.2*iTime*c.xx, rrt.z);\n"
"        rot(.3*rrt-.05*vec3(1.3,1.41,1.66)*iTime, RR);\n"
"\n"
"        col = abs(RR*col);\n"
"        \n"
"        float dvs;\n"
"        stroke(dv,.01,dvs);\n"
"        dvs = .1-dvs;\n"
"        col = mix(col, mix(col,c1,.22), smoothstep(1.5/iResolution.y, -1.5/iResolution.y,dvs));\n"
"        col = mix(col, mix(col,c.yyy,.12), smoothstep(1.5/iResolution.y, -1.5/iResolution.y,-abs(dvs)+.1));\n"
"    }\n"
"}\n"
"\n"
"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n"
"{\n"
"    a = iResolution.x/iResolution.y;\n"
"    vec2 uv = fragCoord/iResolution.yy-0.5*vec2(a, 1.0);\n"
"    vec3 col = c.yyy;\n"
"    \n"
"    uv -= .3*iTime*c.yx;\n"
"    \n"
"    colorize(uv,col);\n"
"    \n"
"    vec3 ddd;\n"
"    rand(uv-iTime*c.xx, ddd.x);\n"
"    rand(uv-iTime*c.xx, ddd.y);\n"
"    rand(uv-iTime*c.xx, ddd.z);\n"
"    col -=.1*ddd;\n"
"    \n"
"    col = clamp(col, 0.,1.);\n"
"    \n"
"    fragColor = vec4(col,1.0);\n"
"}\n"
"\n"
"void main()\n"
"{\n"
"    mainImage(gl_FragColor, gl_FragCoord.xy);\n"
"}\n"
"\n"
;
#endif
